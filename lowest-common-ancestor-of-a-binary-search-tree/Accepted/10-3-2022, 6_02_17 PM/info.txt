{"id":814617863,"question_id":235,"lang":"python3","lang_name":"Python3","time":"2 years, 5 months","timestamp":1664845337,"status":10,"status_display":"Accepted","runtime":"79 ms","url":"/submissions/detail/814617863/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Search Tree","memory":"18.7 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':\n        cur=root\n        \n        while cur:\n            if p.val>cur.val and q.val>cur.val:\n                cur=cur.right\n            elif p.val<cur.val and q.val <cur.val:\n                cur=cur.left\n            else:\n                return cur","compare_result":"11111111111111111111111111111","title_slug":"lowest-common-ancestor-of-a-binary-search-tree","has_notes":false,"flag_type":1}