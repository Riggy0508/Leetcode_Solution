{"id":1564276950,"question_id":235,"lang":"python3","lang_name":"Python3","time":"4 days, 3 hours","timestamp":1741217255,"status":10,"status_display":"Accepted","runtime":"67 ms","url":"/submissions/detail/1564276950/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Search Tree","memory":"21.1 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':\n        if not root:\n            return \n\n        if root.val==p.val or root.val==q.val:\n            return root\n\n        left=self.lowestCommonAncestor(root.left, p, q)\n        right=self.lowestCommonAncestor(root.right, p, q)\n\n        if left and right:\n            return root\n\n        return left if left else right","compare_result":"111111111111111111111111111111","title_slug":"lowest-common-ancestor-of-a-binary-search-tree","has_notes":false,"flag_type":1}