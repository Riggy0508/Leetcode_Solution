{"id":781610957,"lang":"python3","time":"1Â month","timestamp":1661292160,"status_display":"Accepted","runtime":"717 ms","url":"/submissions/detail/781610957/","is_pending":"Not Pending","title":"Shortest Path in Binary Matrix","memory":"14.1 MB","code":"class Solution:\n    def shortestPathBinaryMatrix(self, grid: List[List[int]]) -> int:\n        if grid[0][0] or grid[-1][-1]:\n            return -1\n        \n        \n        queue=collections.deque([(0,0,1)])\n        \n        grid[0][0]=1\n        \n        directions=[(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]\n        while queue:\n            x,y,path_len=queue.popleft()\n            \n            if (x,y)==(len(grid)-1,len(grid[0])-1):\n                return path_len\n            \n            for x_inc,y_inc in directions:\n                new_x=x+x_inc\n                new_y=y+y_inc\n                \n                if (0<=new_x<len(grid) and (0<=new_y<len(grid[0])) and not grid[new_x][new_y]):\n                    grid[new_x][new_y]=1\n                    \n                    queue.append((new_x,new_y,path_len+1))\n        return -1","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"shortest-path-in-binary-matrix"}