{"id":781730453,"lang":"python3","time":"1Â month","timestamp":1661307033,"status_display":"Accepted","runtime":"225 ms","url":"/submissions/detail/781730453/","is_pending":"Not Pending","title":"Surrounded Regions","memory":"16 MB","code":"class Solution(object):\n    def solve(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        if not board or not board[0]:\n            return\n\n        self.ROWS = len(board)\n        self.COLS = len(board[0])\n\n        # Step 1). retrieve all border cells\n        from itertools import product\n        borders = list(product(range(self.ROWS), [0, self.COLS-1])) \\\n                + list(product([0, self.ROWS-1], range(self.COLS)))\n\n        # Step 2). mark the \"escaped\" cells, with any placeholder, e.g. 'E'\n        for row, col in borders:\n            self.DFS(board, row, col)\n\n        # Step 3). flip the captured cells ('O'->'X') and the escaped one ('E'->'O')\n        for r in range(self.ROWS):\n            for c in range(self.COLS):\n                if board[r][c] == 'O':   board[r][c] = 'X'  # captured\n                elif board[r][c] == 'E': board[r][c] = 'O'  # escaped\n\n\n    def DFS(self, board, row, col):\n        if board[row][col] != 'O':\n            return\n        board[row][col] = 'E'\n        if col < self.COLS-1: self.DFS(board, row, col+1)\n        if row < self.ROWS-1: self.DFS(board, row+1, col)\n        if col > 0: self.DFS(board, row, col-1)\n        if row > 0: self.DFS(board, row-1, col)","compare_result":"1111111111111111111111111111111111111111111111111111111111","title_slug":"surrounded-regions"}