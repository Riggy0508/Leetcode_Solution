{"id":973331202,"question_id":98,"lang":"python3","lang_name":"Python3","time":"1 year, 8 months","timestamp":1687006731,"status":10,"status_display":"Accepted","runtime":"63 ms","url":"/submissions/detail/973331202/","is_pending":"Not Pending","title":"Validate Binary Search Tree","memory":"18.8 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def isValidBST(self, root: Optional[TreeNode]) -> bool:\n        \n        # def validateTree(node,left,right):\n        #     if not node:\n        #         return True\n\n        #     if not(node.val>left and node.val<right):\n        #         return False\n\n        #     return (validateTree(node.left,left,node.val) and (validateTree(node.right,node.val,right)))\n        # return validateTree(root,float(\"-inf\"),float(\"inf\"))\n\n        def validateTree(node,left,right):\n            if not node:\n                return True\n            \n            if not (node.val>left and node.val<right):\n                return False\n            \n            return (validateTree(node.left,left,node.val) and validateTree(node.right,node.val,right))\n        return validateTree(root,float(\"-inf\"),float(\"inf\"))","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"validate-binary-search-tree","has_notes":false,"flag_type":1}