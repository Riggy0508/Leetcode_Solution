{"id":732123495,"lang":"python3","time":"3Â months","timestamp":1656287427,"status_display":"Accepted","runtime":"92 ms","url":"/submissions/detail/732123495/","is_pending":"Not Pending","title":"Binary Search Tree Iterator","memory":"20.6 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass BSTIterator:\n\n    def __init__(self, root: Optional[TreeNode]):\n        self.stack=[]\n        cur=root\n        while cur:\n            self.stack.append(cur)\n            cur=cur.left\n\n    def next(self) -> int:\n        if not self.stack: return None\n        c=self.stack.pop()\n        cur=c\n        if cur.right:\n            cur=cur.right\n        else:\n            cur=None\n        while cur:\n            self.stack.append(cur)\n            cur=cur.left \n        return c.val\n\n    def hasNext(self) -> bool:\n        return self.stack!=[]\n\n\n# Your BSTIterator object will be instantiated and called as such:\n# obj = BSTIterator(root)\n# param_1 = obj.next()\n# param_2 = obj.hasNext()","compare_result":"1111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-search-tree-iterator"}