{"id":1559726412,"question_id":173,"lang":"python3","lang_name":"Python3","time":"1 week, 1 day","timestamp":1740871733,"status":10,"status_display":"Accepted","runtime":"12 ms","url":"/submissions/detail/1559726412/","is_pending":"Not Pending","title":"Binary Search Tree Iterator","memory":"25 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass BSTIterator:\n\n    def __init__(self, root: Optional[TreeNode]):\n        self.stack=[]\n        self._push_left(root)\n\n    def _push_left(self,node):\n        while node:\n            self.stack.append(node)\n            node=node.left\n\n    def next(self) -> int:\n        node=self.stack.pop()\n        if node.right:\n            self._push_left(node.right)\n        return node.val\n\n    def hasNext(self) -> bool:\n        return len(self.stack)!=0\n        \n\n\n# Your BSTIterator object will be instantiated and called as such:\n# obj = BSTIterator(root)\n# param_1 = obj.next()\n# param_2 = obj.hasNext()","compare_result":"1111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-search-tree-iterator","has_notes":false,"flag_type":1}