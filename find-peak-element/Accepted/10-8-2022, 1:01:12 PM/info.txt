{"id":818111164,"question_id":162,"lang":"python3","lang_name":"Python3","time":"2 years, 4 months","timestamp":1665259272,"status":10,"status_display":"Accepted","runtime":"57 ms","url":"/submissions/detail/818111164/","is_pending":"Not Pending","title":"Find Peak Element","memory":"14 MB","code":"# In order to solve this question, try to plot the the points on a graph (Try the second example from leetcode question section for better understanding).\n\n# Try to think it like this:\n#     consider all the points are in the ascending order 1,2,3,4 in this case according to the information given by Leetcode nums[-1] = nums[n] = -∞. The array will look like this: -∞,1,2,3,4,-∞ and in this case our peak element will be 4 because its greater than its neighbour. \n        \n#         now considering our array 1,2,1,3,5,6,4, lets say that our mid is 3, in this case our answer can also be 2 i.e we can move the binary search to the left side but the chances are less. But theres a guarentee that if we move towards the right side we are gonna find a peak element. (If this sounds contradictory consider the ascending order example above).\n\n\nclass Solution:\n    def findPeakElement(self, nums: List[int]) -> int:\n        l,r=0,len(nums)-1\n        \n        while l<=r:\n            mid=(l+r)//2\n            \n            #Handling edge cases like when mid is 0 and when mid is pointing towards the last element.\n            if (mid==0 or nums[mid]>nums[mid-1]) and (mid==len(nums)-1 or nums[mid]>nums[mid+1]):\n                return mid\n            \n            if nums[mid]<nums[mid+1]:\n                l=mid+1\n            else:\n                r=mid-1\n                \n        return -1","compare_result":"111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-peak-element","has_notes":false,"flag_type":1}