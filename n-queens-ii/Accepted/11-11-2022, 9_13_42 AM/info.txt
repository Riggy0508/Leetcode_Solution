{"id":841481325,"question_id":52,"lang":"python3","lang_name":"Python3","time":"2 years, 3 months","timestamp":1668186822,"status":10,"status_display":"Accepted","runtime":"83 ms","url":"/submissions/detail/841481325/","is_pending":"Not Pending","title":"N-Queens II","memory":"14 MB","code":"class Solution:\n    def totalNQueens(self, n: int) -> int:\n        cols=set()\n        pos_diag=set()\n        neg_diag=set()\n        \n        def backtrack(row,cols,pos_diag,neg_diag):\n            if row==n:\n                return 1\n            \n            total=0\n            \n            for col in range(n):\n                # cur_pos_diag=(row+col)\n                # cur_neg_diag=(row-col)\n                \n                if col in cols or (row+col) in pos_diag or (row-col) in neg_diag:\n                    continue\n                \n                cols.add(col)\n                pos_diag.add(row+col)\n                neg_diag.add(row-col)\n                \n                total+=backtrack(row+1,cols,pos_diag,neg_diag)\n                \n                cols.remove(col)\n                pos_diag.remove(row+col)\n                neg_diag.remove(row-col)\n                \n            return total\n                \n        \n        \n        \n        \n        \n        \n        return backtrack(0,cols,pos_diag,neg_diag)\n        \n        ","compare_result":"111111111","title_slug":"n-queens-ii","has_notes":false,"flag_type":1}