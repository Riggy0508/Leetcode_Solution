{"id":840289620,"question_id":52,"lang":"python3","lang_name":"Python3","time":"2 years, 4 months","timestamp":1668022069,"status":10,"status_display":"Accepted","runtime":"85 ms","url":"/submissions/detail/840289620/","is_pending":"Not Pending","title":"N-Queens II","memory":"13.9 MB","code":"class Solution:\n    def totalNQueens(self, n: int) -> int:\n        def backtrack(row,diagonal,anti_diagonal,cols):\n            if row==n:\n                return 1\n            \n            solutions=0\n            #checking if the queen is presetn in a given col. nxn matrix that's why we are checking in range(n)\n            for col in range(n):\n                cur_diagonal=row-col\n                cur_anti_diagonal=row+col\n                \n                \n                if col in cols or cur_diagonal in diagonal or cur_anti_diagonal in anti_diagonal:\n                    continue\n                    \n                cols.add(col)\n                diagonal.add(cur_diagonal)\n                anti_diagonal.add(cur_anti_diagonal)\n                \n                solutions+=backtrack(row+1,diagonal,anti_diagonal,cols)\n                \n                cols.remove(col)\n                diagonal.remove(cur_diagonal)\n                anti_diagonal.remove(cur_anti_diagonal)\n                \n            return solutions\n                \n            \n        return backtrack(0,set(),set(),set())","compare_result":"111111111","title_slug":"n-queens-ii","has_notes":false,"flag_type":1}