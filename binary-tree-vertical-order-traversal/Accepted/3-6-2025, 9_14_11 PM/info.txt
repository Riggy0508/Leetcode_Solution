{"id":1565608517,"question_id":314,"lang":"python3","lang_name":"Python3","time":"2 days, 21 hours","timestamp":1741324451,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1565608517/","is_pending":"Not Pending","title":"Binary Tree Vertical Order Traversal","memory":"17.7 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def verticalOrder(self, root: Optional[TreeNode]) -> List[List[int]]:\n        if not root:\n            return []\n        \n        hash1=defaultdict(list)\n\n        q=deque([(root,0)])\n\n        while q:\n            node,col=q.popleft()\n\n            hash1[col].append(node.val)\n\n            if node.left:\n                q.append((node.left,col-1))\n\n            if node.right:\n                q.append((node.right,col+1))\n\n        return [hash1[key] for key in sorted(hash1.keys())]","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-vertical-order-traversal","has_notes":false,"flag_type":1}