{"id":865989707,"question_id":945,"lang":"python3","lang_name":"Python3","time":"2 years, 1 month","timestamp":1672089507,"status":10,"status_display":"Accepted","runtime":"122 ms","url":"/submissions/detail/865989707/","is_pending":"Not Pending","title":"Snakes and Ladders","memory":"13.8 MB","code":"class Solution:\n    def snakesAndLadders(self, board: List[List[int]]) -> int:\n\n        length=len(board)\n        board.reverse()\n        # We need to reverse the board because we are not starting from bottom left corner rather than  the normal top left. Plus doing so will help us with our calculations\n\n        def intoPos(square):\n            r=(square-1)//length\n            c=(square-1)%length\n            if r%2:\n                c=length-1-c\n            return [r,c]\n\n        q=collections.deque()\n        q.append([1,0])\n        visit=set()\n        while q:\n            square,moves= q.popleft()\n\n            for i in range(1,7):\n                nextSquare = square + i\n\n                r,c=intoPos(nextSquare)\n                if board[r][c]!=-1:\n                    nextSquare=board[r][c]\n                if nextSquare==length*length:\n                    return moves+1\n                if nextSquare not in visit:\n                    visit.add(nextSquare)\n                    q.append([nextSquare , moves + 1])\n        return -1\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"snakes-and-ladders","has_notes":false,"flag_type":1}