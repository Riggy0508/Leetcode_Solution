{"id":1546630355,"question_id":148,"lang":"python3","lang_name":"Python3","time":"2 weeks, 6 days","timestamp":1739821366,"status":10,"status_display":"Accepted","runtime":"171 ms","url":"/submissions/detail/1546630355/","is_pending":"Not Pending","title":"Sort List","memory":"32.8 MB","code":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def sortList(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        if not head or not head.next:\n            return head\n\n        slow,fast=head,head.next\n\n        while fast and fast.next:\n            slow=slow.next\n            fast=fast.next.next\n\n        mid=slow.next\n        slow.next=None\n\n        left=self.sortList(head)\n        right=self.sortList(mid)\n\n        return self.merge(left,right)\n\n\n\n    def merge(self,l1,l2):\n        dummyNode=ListNode()\n        prev=dummyNode\n\n        while l1 and l2:\n            if l1.val < l2.val:\n                prev.next=l1\n                l1=l1.next\n            else:\n                prev.next=l2\n                l2=l2.next\n\n            prev=prev.next\n\n        if l1:\n            prev.next=l1\n        if l2:\n            prev.next=l2\n\n        return dummyNode.next","compare_result":"111111111111111111111111111111","title_slug":"sort-list","has_notes":false,"flag_type":1}