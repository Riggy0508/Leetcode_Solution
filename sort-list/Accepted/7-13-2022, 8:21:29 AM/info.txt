{"id":746163907,"lang":"python3","time":"2 months, 2 weeks","timestamp":1657725689,"status_display":"Accepted","runtime":"1042 ms","url":"/submissions/detail/746163907/","is_pending":"Not Pending","title":"Sort List","memory":"36.5 MB","code":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def sortList(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        if not head or not head.next:\n            return head\n        \n        #splitting the list into two half's. \n        left=head\n        right=self.mid(head)\n        temp=right.next\n        right.next=None\n        right=temp\n        \n        left=self.sortList(left)\n        right=self.sortList(right)\n        return self.merge(left,right)\n    \n    \n    def mid(self,head):\n        slow=head\n        fast=head.next\n        \n        while fast and fast.next:\n            slow=slow.next\n            fast=fast.next.next\n            \n        return slow\n    \n    def merge(self,list1,list2):\n        tail=dummy=ListNode()\n        \n        while list1 and list2:\n            if list1.val<list2.val:\n                tail.next=list1\n                list1=list1.next\n            else:\n                tail.next=list2\n                list2=list2.next\n            tail=tail.next\n        if list1:\n            tail.next=list1\n        if list2:\n            tail.next=list2\n            \n        return dummy.next","compare_result":"111111111111111111111111111111","title_slug":"sort-list"}