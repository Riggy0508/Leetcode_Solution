{"id":880082673,"lang":"python3","lang_name":"Python3","time":"1 month, 1 week","timestamp":1673980706,"status":10,"status_display":"Accepted","runtime":"106 ms","url":"/submissions/detail/880082673/","is_pending":"Not Pending","title":"Serialize and Deserialize Binary Tree","memory":"20.2 MB","code":"# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Codec:\n\n    def serialize(self, root):\n        \"\"\"Encodes a tree to a single string.\n        \n        :type root: TreeNode\n        :rtype: str\n        \"\"\"\n        res=[]\n\n        def dfs(node):\n            if not node:\n                res.append(\"N\")\n                return\n\n            res.append(str(node.val))\n            dfs(node.left)\n            dfs(node.right)\n        dfs(root)\n        return \",\".join(res)\n        \n\n    def deserialize(self, data):\n        \"\"\"Decodes your encoded data to tree.\n        \n        :type data: str\n        :rtype: TreeNode\n        \"\"\"\n        vals=data.split(\",\")\n        self.i=0\n\n        def dfs():\n            if vals[self.i]==\"N\":\n                self.i+=1\n                return None\n            node=TreeNode(int(vals[self.i]))\n            self.i+=1\n            node.left=dfs()\n            node.right=dfs()\n            return node\n        return dfs()\n        \n\n# Your Codec object will be instantiated and called as such:\n# ser = Codec()\n# deser = Codec()\n# ans = deser.deserialize(ser.serialize(root))","compare_result":"1111111111111111111111111111111111111111111111111111","title_slug":"serialize-and-deserialize-binary-tree","has_notes":false}