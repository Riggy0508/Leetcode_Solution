{"id":1564423505,"question_id":341,"lang":"python3","lang_name":"Python3","time":"3 days, 23 hours","timestamp":1741232734,"status":10,"status_display":"Accepted","runtime":"50 ms","url":"/submissions/detail/1564423505/","is_pending":"Not Pending","title":"Flatten Nested List Iterator","memory":"20.4 MB","code":"# \"\"\"\n# This is the interface that allows for creating nested lists.\n# You should not implement it, or speculate about its implementation\n# \"\"\"\n#class NestedInteger:\n#    def isInteger(self) -> bool:\n#        \"\"\"\n#        @return True if this NestedInteger holds a single integer, rather than a nested list.\n#        \"\"\"\n#\n#    def getInteger(self) -> int:\n#        \"\"\"\n#        @return the single integer that this NestedInteger holds, if it holds a single integer\n#        Return None if this NestedInteger holds a nested list\n#        \"\"\"\n#\n#    def getList(self) -> [NestedInteger]:\n#        \"\"\"\n#        @return the nested list that this NestedInteger holds, if it holds a nested list\n#        Return None if this NestedInteger holds a single integer\n#        \"\"\"\n\nclass NestedIterator:\n    def __init__(self, nestedList: [NestedInteger]):\n        self.stack=nestedList[::-1]\n\n    def next(self) -> int:\n        return self.stack.pop().getInteger()\n        \n    def hasNext(self) -> bool:\n        while self.stack:\n\n            top=self.stack[-1]\n\n            if top.isInteger():\n                return True\n\n            self.stack.pop()\n            self.stack.extend(top.getList()[::-1])\n\n        return False\n         \n\n# Your NestedIterator object will be instantiated and called as such:\n# i, v = NestedIterator(nestedList), []\n# while i.hasNext(): v.append(i.next())","compare_result":"1111111111111111111111111111111111111111111","title_slug":"flatten-nested-list-iterator","has_notes":false,"flag_type":1}