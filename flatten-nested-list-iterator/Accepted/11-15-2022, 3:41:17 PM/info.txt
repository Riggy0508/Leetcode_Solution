{"id":844202771,"lang":"python3","lang_name":"Python3","time":"3 months, 1 week","timestamp":1668555677,"status":10,"status_display":"Accepted","runtime":"133 ms","url":"/submissions/detail/844202771/","is_pending":"Not Pending","title":"Flatten Nested List Iterator","memory":"17.8 MB","code":"# \"\"\"\n# This is the interface that allows for creating nested lists.\n# You should not implement it, or speculate about its implementation\n# \"\"\"\n#class NestedInteger:\n#    def isInteger(self) -> bool:\n#        \"\"\"\n#        @return True if this NestedInteger holds a single integer, rather than a nested list.\n#        \"\"\"\n#\n#    def getInteger(self) -> int:\n#        \"\"\"\n#        @return the single integer that this NestedInteger holds, if it holds a single integer\n#        Return None if this NestedInteger holds a nested list\n#        \"\"\"\n#\n#    def getList(self) -> [NestedInteger]:\n#        \"\"\"\n#        @return the nested list that this NestedInteger holds, if it holds a nested list\n#        Return None if this NestedInteger holds a single integer\n#        \"\"\"\n\nclass NestedIterator:\n    def __init__(self, nestedList: [NestedInteger]):\n        \n        def flattern(nl):\n            temp=[]\n            for i in nl:\n                if i.isInteger():\n                    temp.append(i.getInteger())\n                else:\n                    temp.extend(flattern(i.getList()))\n            return temp\n        self.n=deque(flattern(nestedList))\n\n    def next(self) -> int:\n        return self.n.popleft()\n    \n    def hasNext(self) -> bool:\n         return self.n\n\n# Your NestedIterator object will be instantiated and called as such:\n# i, v = NestedIterator(nestedList), []\n# while i.hasNext(): v.append(i.next())","compare_result":"1111111111111111111111111111111111111111111","title_slug":"flatten-nested-list-iterator","has_notes":false}