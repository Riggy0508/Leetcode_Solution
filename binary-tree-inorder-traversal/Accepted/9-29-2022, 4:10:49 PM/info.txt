{"id":811695775,"lang":"python3","lang_name":"Python3","time":"1 month, 1 week","timestamp":1664493049,"status":10,"status_display":"Accepted","runtime":"30 ms","url":"/submissions/detail/811695775/","is_pending":"Not Pending","title":"Binary Tree Inorder Traversal","memory":"13.8 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def inorderTraversal(self, root: Optional[TreeNode]) -> List[int]:\n        #In this problem we need to return the output in the form of list, hence we will create a list in the start\n        res=[]\n        \n        #Because we are trying to solve this using recursion, we need to define a recursive function\n        def inOrder(root):\n            #Handling a case where if root is present we will find the next root by traversing left and right\n            if root:\n                inOrder(root.left)\n                #In Inorder Traversal, we start visit the left node then the root node and then the right node\n                #We have traverse the left part now it's time to add teh root to our list\n                res.append(root.val)\n                #Looking towards the right part\n                inOrder(root.right)\n            \n        #Base condition to call the recursion function \n        inOrder(root)\n        return res","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-inorder-traversal","has_notes":false,"notes":"","topic_tags":[]}