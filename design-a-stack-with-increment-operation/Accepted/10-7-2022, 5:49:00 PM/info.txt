{"id":817537905,"lang":"python3","lang_name":"Python3","time":"1Â month","timestamp":1665190140,"status":10,"status_display":"Accepted","runtime":"386 ms","url":"/submissions/detail/817537905/","is_pending":"Not Pending","title":"Design a Stack With Increment Operation","memory":"15.3 MB","code":"class CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.stack1=[]\n        self.maxSize=maxSize\n        self.stack2=[]\n\n    def push(self, x: int) -> None:\n        if len(self.stack1)<self.maxSize:\n            self.stack1.append(x)\n         \n\n    def pop(self) -> int:\n        if len(self.stack1)==0:\n            return -1\n        else:\n            return self.stack1.pop()\n\n    def increment(self, k: int, val: int) -> None:\n        while self.stack1:\n            self.stack2.append(self.stack1.pop())\n        \n        \n        #-a=len(self.stack2)\n        \n        \n        n=k\n        while self.stack2:\n            if n>0:\n                self.stack1.append(self.stack2.pop()+val)\n                n=n-1\n            else:\n                self.stack1.append(self.stack2.pop())\n        print(self.stack1,self.stack2)\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        #while self.stack2:\n         #   if n>0:\n          #      self.stack1.append(self.stack2.pop()+val)\n                #n-=1\n           # else:\n            #    self.stack1.append(self.stack2)\n        #print(self.stack1,self.stack2)        \n\n\n\n\n# Your CustomStack object will be instantiated and called as such:\n# obj = CustomStack(maxSize)\n# obj.push(x)\n# param_2 = obj.pop()\n# obj.increment(k,val)","compare_result":"1111111111111111111111111111111111","title_slug":"design-a-stack-with-increment-operation","has_notes":false,"notes":"","topic_tags":[]}