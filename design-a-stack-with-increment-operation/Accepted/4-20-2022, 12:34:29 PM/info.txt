{"id":684331093,"lang":"python3","time":"5 months, 1 week","timestamp":1650483269,"status_display":"Accepted","runtime":"128 ms","url":"/submissions/detail/684331093/","is_pending":"Not Pending","title":"Design a Stack With Increment Operation","memory":"14.7 MB","code":"class CustomStack:\n\n    def __init__(self, maxSize: int):\n        self.maxSize=maxSize\n        self.stack=[]\n\n    def push(self, x: int) -> None:\n        if len(self.stack)<self.maxSize:\n            self.stack.append(x)\n\n    def pop(self) -> int:\n        if(self.stack):\n            return self.stack.pop()\n        return -1\n    \n    def increment(self, k: int, val: int) -> None:\n        if (len(self.stack)>k):\n            for i in range(k):\n                self.stack[i]+=val\n        else:\n            for i in range(len(self.stack)):\n                self.stack[i]+=val\n            \n\n\n# Your CustomStack object will be instantiated and called as such:\n# obj = CustomStack(maxSize)\n# obj.push(x)\n# param_2 = obj.pop()\n# obj.increment(k,val)","compare_result":"1111111111111111111111111111111111","title_slug":"design-a-stack-with-increment-operation"}