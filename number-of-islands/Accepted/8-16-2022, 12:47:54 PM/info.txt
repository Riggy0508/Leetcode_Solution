{"id":775466723,"lang":"python3","time":"1 month, 1 week","timestamp":1660679274,"status_display":"Accepted","runtime":"468 ms","url":"/submissions/detail/775466723/","is_pending":"Not Pending","title":"Number of Islands","memory":"21.9 MB","code":"class Solution:\n    def numIslands(self, grid: List[List[str]]) -> int:\n        if not grid:\n            return 0\n        \n        islands=0\n        rows,cols=len(grid),len(grid[0])\n        visit=set()\n        \n        \n        #iterative bfs function\n        \n        def bfs(r,c):\n            q=collections.deque()\n            visit.add((r,c))\n            q.append((r,c))\n            \n            while q:\n                row,col=q.popleft()\n                directions=[[1,0],[-1,0],[0,1],[0,-1]]\n                for dr,dc in directions:\n                    r,c=row+dr,col+dc\n                    \n                    if (r in range(rows) and\n                       c in range(cols) and\n                       grid[r][c]==\"1\" and\n                       (r,c) not in visit):\n                        q.append((r,c))\n                        visit.add((r,c))\n                        \n        for r in range(rows):\n            for c in range(cols):\n                if grid[r][c]==\"1\" and (r,c) not in visit:\n                    islands+=1\n                    bfs(r,c)\n        return islands","compare_result":"1111111111111111111111111111111111111111111111111","title_slug":"number-of-islands"}