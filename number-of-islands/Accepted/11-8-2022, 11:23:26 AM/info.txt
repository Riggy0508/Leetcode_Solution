{"id":839634664,"lang":"python3","lang_name":"Python3","time":"3 months, 2 weeks","timestamp":1667935406,"status":10,"status_display":"Accepted","runtime":"1315 ms","url":"/submissions/detail/839634664/","is_pending":"Not Pending","title":"Number of Islands","memory":"21.9 MB","code":"class Solution:\n    def numIslands(self, grid: List[List[str]]) -> int:\n        rows,cols=len(grid),len(grid[0])\n        \n        islands=0\n        \n        visited=set()\n        directions=[(0,1),(0,-1),(1,0),(-1,0)]\n        \n        #One should notice that as we are using bfs we have to make use of queue\n        \n        \n        def bfs(r,c):\n            q=collections.deque()\n            visited.add((r,c))\n            q.append((r,c))\n            \n            #check if the neighbouring [r][c] is not in visited set and if not increase the island counter \n            \n            while q:\n                row,col=q.popleft()\n                print(row,col)\n                for dr,dc in directions:\n                    r=row+dr\n                    c=col+dc\n                    \n                    if r in range(rows) and c in range(cols) and grid[r][c]==\"1\" and (r,c) not in visited:\n                        q.append((r,c))\n                        visited.add((r,c))\n                    \n        \n        for r in range(rows):\n            for c in range(cols):\n                if grid[r][c]==\"1\" and (r,c) not in visited:\n                    islands+=1\n                    bfs(r,c)\n        return islands","compare_result":"1111111111111111111111111111111111111111111111111","title_slug":"number-of-islands","has_notes":false}