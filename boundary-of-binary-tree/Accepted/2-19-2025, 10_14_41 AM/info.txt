{"id":1548836018,"question_id":545,"lang":"python3","lang_name":"Python3","time":"2 weeks, 4 days","timestamp":1739988881,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1548836018/","is_pending":"Not Pending","title":"Boundary of Binary Tree","memory":"19.3 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def boundaryOfBinaryTree(self, root: Optional[TreeNode]) -> List[int]:\n        if not root:\n            return []\n\n        def isLeaf(node):\n            return node and not node.left and not node.right\n\n        def dfs(node,isLeft,isRight):\n            if not node:\n                return \n\n            if isLeft and not isLeaf(node):\n                result.append(node.val)\n            \n            if isLeaf(node):\n                result.append(node.val)\n\n            dfs(node.left,isLeft,isRight and not node.right)\n            dfs(node.right,isLeft and not node.left,isRight)\n\n            if isRight and not isLeaf(node):\n                result.append(node.val)\n\n        result=[]\n        result.append(root.val)\n\n        dfs(root.left,isLeft=True,isRight=False)\n        dfs(root.right,isLeft=False,isRight=True)\n\n        return result\n            ","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"boundary-of-binary-tree","has_notes":false,"flag_type":1}