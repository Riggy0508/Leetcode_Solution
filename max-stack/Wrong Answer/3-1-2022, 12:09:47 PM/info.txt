{"id":651450692,"lang":"python3","time":"6 months, 3 weeks","timestamp":1646165387,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/651450692/","is_pending":"Not Pending","title":"Max Stack","memory":"N/A","code":"class MaxStack:\n\n    def __init__(self):\n        self.stack=[];\n        self.max_stack=[]\n\n    def push(self, x: int) -> None:\n        self.stack.append(x)\n        if(len(self.max_stack)==0):\n            self.max_stack.append(x)\n        if self.max_stack[-1]>x:\n            self.max_stack.append(self.max_stack[-1])\n        else:\n            self.max_stack.append(x)\n\n    def pop(self) -> int:\n        if(len(self.stack)!=0):\n            self.max_stack.pop(-1)\n            return self.stack.pop(-1)\n\n    def top(self) -> int:\n        return self.stack[-1]\n        \n    def peekMax(self) -> int:\n        if (len(self.max_stack)!=0):\n            return self.max_stack[-1]\n\n    def popMax(self) -> int:\n        val=self.peekMax()\n        buff=[]\n        while self.top()!=val:\n            buff.append(self.pop())\n        self.pop();\n        while len(buff)!=0:\n            self.push(buff.pop(-1))\n        return val\n        \n\n\n# Your MaxStack object will be instantiated and called as such:\n# obj = MaxStack()\n# obj.push(x)\n# param_2 = obj.pop()\n# param_3 = obj.top()\n# param_4 = obj.peekMax()\n# param_5 = obj.popMax()","compare_result":"11111101111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"max-stack"}