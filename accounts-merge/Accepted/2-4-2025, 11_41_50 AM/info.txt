{"id":1531477354,"question_id":721,"lang":"python3","lang_name":"Python3","time":"1Â month","timestamp":1738698110,"status":10,"status_display":"Accepted","runtime":"32 ms","url":"/submissions/detail/1531477354/","is_pending":"Not Pending","title":"Accounts Merge","memory":"26 MB","code":"class Solution:\n    def accountsMerge(self, accounts: List[List[str]]) -> List[List[str]]:\n        email_graph=defaultdict(set)\n        email_to_name={}\n\n        for account in accounts:\n            name=account[0]\n            emails=account[1:]\n            for email in emails:\n                email_to_name[email]=name\n\n                email_graph[emails[0]].add(email)\n                email_graph[email].add(emails[0])\n\n\n        seen=set()\n        merged_account=[]\n\n        def dfs(email,component):\n            seen.add(email)\n            component.append(email)\n\n            for neighbor in email_graph[email]:\n                if neighbor not in seen:\n                    dfs(neighbor,component)\n\n\n        for email in email_graph:\n            if email not in seen:\n                component=[]\n                dfs(email,component)\n                merged_account.append([email_to_name[email]]+sorted(component))\n\n        return merged_account","compare_result":"11111111111111111111111111111111111111111111111111","title_slug":"accounts-merge","has_notes":false,"flag_type":1}