{"id":781604609,"lang":"python3","time":"1Â month","timestamp":1661291406,"status_display":"Accepted","runtime":"268 ms","url":"/submissions/detail/781604609/","is_pending":"Not Pending","title":"Number of Provinces","memory":"15.1 MB","code":"class Solution:\n    def findCircleNum(self, isConnected: List[List[int]]) -> int:\n        if not isConnected: return 0\n        s=len(isConnected)\n        seen=set()\n        \n        def dfs(p):\n            for q, adj in enumerate(isConnected[p]):\n                #print(q,adj)\n                if (adj==1 and (q not in seen)):\n                    seen.add(q)\n                    dfs(q)\n\n        count1=0\n        for i in range(s):\n            if i not in seen:\n                dfs(i)\n                count1+=1\n        return count1\n        ","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"number-of-provinces"}