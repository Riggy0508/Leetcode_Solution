{"id":748398142,"lang":"python3","time":"2 months, 1 week","timestamp":1657961567,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/748398142/","is_pending":"Not Pending","title":"Balanced Binary Tree","memory":"N/A","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def isBalanced(self, root: Optional[TreeNode]) -> bool:\n        def dfs(root):\n            if not root:\n                return [True,0]\n            \n            left,right=dfs(root.left),dfs(root.right)\n            balanced=(left[0] and right[0] and abs(left[1]-(right[1])<=1))\n            return [balanced,1+max(left[1],right[1])]\n        \n        return dfs(root)[0]","compare_result":"111111010111111011101100011111111111000110000111110011111111111111111111111111000110000111110001100001101111111111111111000110000111110011100111000011111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"balanced-binary-tree"}