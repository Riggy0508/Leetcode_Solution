{"id":843500077,"lang":"python3","lang_name":"Python3","time":"3 months, 1 week","timestamp":1668459781,"status":10,"status_display":"Accepted","runtime":"122 ms","url":"/submissions/detail/843500077/","is_pending":"Not Pending","title":"Sudoku Solver","memory":"14.1 MB","code":"class Solution:\n    def solveSudoku(self, board: List[List[str]]) -> None:\n        \"\"\"\n        Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        def backtrack(r,c):\n            if c==9:\n                r+=1\n                c=0\n            if r==9:\n                return True\n            if board[r][c]!=\".\":\n                return backtrack(r,c+1)\n            \n            \n            for val in range(1,10):\n                if not(val in rows[r] or val in cols[c] or val in square[(r//3,c//3)]):\n                    rows[r].add(val)\n                    cols[c].add(val)\n                    square[(r//3,c//3)].add(val)\n                    \n                    board[r][c]=str(val)\n                    \n                    if backtrack(r,c+1):\n                        return 1\n                    \n                    rows[r].remove(val)\n                    cols[c].remove(val)\n                    square[(r//3,c//3)].remove(val)\n                    \n                    board[r][c]=\".\"\n                    \n            return 0\n                \n\n        rows=defaultdict(set)\n        cols=defaultdict(set)\n        square=defaultdict(set)\n        \n        for r in range(9):\n            for c in range(9):\n                if board[r][c]!=\".\":\n                    rows[r].add(int(board[r][c]))\n                    cols[c].add(int(board[r][c]))\n                    square[(r//3,c//3)].add(int(board[r][c]))\n        \n        backtrack(0,0)","compare_result":"111111","title_slug":"sudoku-solver","has_notes":false}