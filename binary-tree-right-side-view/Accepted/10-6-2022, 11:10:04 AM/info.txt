{"id":816679319,"lang":"python3","lang_name":"Python3","time":"4 months, 2 weeks","timestamp":1665079804,"status":10,"status_display":"Accepted","runtime":"77 ms","url":"/submissions/detail/816679319/","is_pending":"Not Pending","title":"Binary Tree Right Side View","memory":"14 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\n\n# Check out my Reference to solve BFS problem solved by me https://leetcode.com/problems/binary-tree-level-order-traversal/discuss/2648277/Pythonor-Validate-Binary-Search-Tree\n#This is a typical BFS solution with just a minute tweak and that is, each time we try to add item's in the queue we are gonna make a note of #the right Most element and only append that in the result.\nclass Solution:\n    def rightSideView(self, root: Optional[TreeNode]) -> List[int]:\n        res=[]\n        q=collections.deque()\n        q.append(root)\n        \n        while q:\n            qLen=len(q)\n            rightSide=None\n            for i in range(qLen):\n                node=q.popleft()\n                if node:\n                    rightSide=node      #This line make's note of the most recent right Side node\n                    q.append(node.left)\n                    q.append(node.right)\n            \n            if rightSide:\n                res.append(rightSide.val)\n        return res","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-right-side-view","has_notes":false}