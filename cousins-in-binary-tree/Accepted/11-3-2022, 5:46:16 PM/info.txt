{"id":836414785,"question_id":1035,"lang":"python3","lang_name":"Python3","time":"2 years, 3 months","timestamp":1667522776,"status":10,"status_display":"Accepted","runtime":"39 ms","url":"/submissions/detail/836414785/","is_pending":"Not Pending","title":"Cousins in Binary Tree","memory":"13.8 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def __init__(self):\n        self.is_Cousins=False\n        self.recorded_depth=None\n        \n    def dfs(self,root,depth,x,y):\n        \n        if root is None:\n            return False\n        \n        if self.recorded_depth and depth>self.recorded_depth:\n            return False\n        \n        if root.val==x or root.val==y:\n            if self.recorded_depth is None:\n                self.recorded_depth=depth\n            return self.recorded_depth==depth\n        \n        left=self.dfs(root.left,depth+1,x,y)\n        right=self.dfs(root.right,depth+1,x,y)\n        \n        if left and right and self.recorded_depth!=depth+1:\n            self.is_Cousins=True\n            \n        return left or right\n        \n    def isCousins(self, root: Optional[TreeNode], x: int, y: int) -> bool:\n        self.dfs(root,0,x,y)\n        return self.is_Cousins","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"cousins-in-binary-tree","has_notes":false,"flag_type":1}