{"id":810782755,"question_id":203,"lang":"python3","lang_name":"Python3","time":"2 years, 4 months","timestamp":1664389241,"status":10,"status_display":"Accepted","runtime":"164 ms","url":"/submissions/detail/810782755/","is_pending":"Not Pending","title":"Remove Linked List Elements","memory":"17.9 MB","code":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def removeElements(self, head: Optional[ListNode], val: int) -> Optional[ListNode]:\n        \n        #Creating a dummyNode to make it easy for us to return the final linked list after all the operation's are been performed\n        dummyNode=ListNode(0)\n        #Pointing the dummy node to the head of the linked list(i.e creating a connection between dummyNode and the given list)\n        dummyNode.next=head\n        \n        #Example 3: Suppose that we need to delete a value(7) from a linked list where all the node's have same value we will have to point the prev to the dummynode because if we point prev to dummynode.next(i.e head) we will end up returning the last 7. According to the example we wanna return an empty list in this case\n        cur,prev=head,dummyNode\n        \n        while cur:\n            #Checking if the value of the current node is the same as the value we wanna delete\n            if cur.val==val:\n                #pointing the prev node which in the start was pointing to the dummyNode(Note: The prev is pointing to the dummyNode and not the head of the linked list)\n                prev.next=cur.next\n            else:\n                prev=cur\n            #irrespective if we found a node to delete or not we are moving to the next node\n            cur=cur.next\n        \n        return dummyNode.next","compare_result":"111111111111111111111111111111111111111111111111111111111111111111","title_slug":"remove-linked-list-elements","has_notes":false,"flag_type":1}