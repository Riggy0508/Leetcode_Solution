{"id":826882441,"lang":"python3","lang_name":"Python3","time":"2 weeks, 5 days","timestamp":1666300613,"status":10,"status_display":"Accepted","runtime":"2638 ms","url":"/submissions/detail/826882441/","is_pending":"Not Pending","title":"Coin Change","memory":"24.9 MB","code":"class Solution:\n    \n    \n    def coinChange(self, coins: List[int], amount: int) -> int:\n        dp = [[0 for x in range(amount+1)]for x in range(len(coins)+1)]\n        \n        ans=self.coinChangeRecur(coins,0,amount,dp)\n        if ans==math.inf:\n            return -1\n        else:\n            return ans\n        \n    def coinChangeRecur(self,coins, index, amount,dp):\n        \n        #base\n        #valid\n        if (amount==0):\n            return 0\n        \n        #invalid\n        if amount < 0 or index==len(coins):\n            return math.inf\n        \n        #recurse\n        #Select\n        \n        if dp[index][amount]==0:\n            \n            select=self.coinChangeRecur(coins,index,amount-coins[index],dp)\n            if select is not math.inf:\n                select+=1\n\n            #notselect\n\n            notSelect=self.coinChangeRecur(coins,index+1,amount,dp)\n            \n            dp[index][amount]=min(select,notSelect)\n        \n        return dp[index][amount]","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"coin-change","has_notes":false,"notes":"","topic_tags":[]}