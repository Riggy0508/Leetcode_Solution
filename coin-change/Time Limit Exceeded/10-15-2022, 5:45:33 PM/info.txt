{"id":823330576,"lang":"python3","lang_name":"Python3","time":"3 weeks, 2 days","timestamp":1665881133,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/823330576/","is_pending":"Not Pending","title":"Coin Change","memory":"N/A","code":"class Solution:\n    dp=dict(list())\n    def coinChange(self, coins: List[int], amount: int) -> int:\n        \n        self.dp=dict(list())\n        \n        ans=self.coinChangeRecur(coins,0,amount)\n        if ans==math.inf:\n            return -1\n        else:\n            return ans\n        \n    def coinChangeRecur(self,coins, index, amount):\n        \n        #base\n        #valid\n        if (amount==0):\n            return 0\n        \n        #invalid\n        if amount < 0 or index==len(coins):\n            return math.inf\n        \n        #recurse\n        #Select\n        \n        if (index,amount) not in self.dp.keys():\n            \n            select=self.coinChangeRecur(coins,index,amount-coins[index])\n            if select is not math.inf:\n                select+=1\n\n            #notselect\n\n            notSelect=self.coinChangeRecur(coins,index+1,amount)\n            \n            self.dp[(index,amount)]=min(select,notSelect)\n        \n        return self.dp[(index,amount)]","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000000000","title_slug":"coin-change","has_notes":false,"notes":"","topic_tags":[]}