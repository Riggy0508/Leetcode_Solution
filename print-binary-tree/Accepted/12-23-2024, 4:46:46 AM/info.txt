{"id":1486271522,"question_id":655,"lang":"python3","lang_name":"Python3","time":"1 month, 4 weeks","timestamp":1734958006,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1486271522/","is_pending":"Not Pending","title":"Print Binary Tree","memory":"18.1 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def printTree(self, root: Optional[TreeNode]) -> List[List[str]]:\n        \n\n        def height(node):\n            if node is None:\n                return -1\n\n            return 1+max(height(node.left),height(node.right))\n\n        def dfs(node,row,col):\n            if node is None:\n                return\n\n            matrix[row][col]=str(node.val)\n            offset=2**(tr_height-row-1)\n\n            dfs(node.left,row+1,col-offset)\n            dfs(node.right,row+1,col+offset)\n\n        tr_height=height(root)\n\n        rows,cols=tr_height+1,2**(tr_height+1)-1\n        matrix=[[\"\" for _ in range(cols)] for _ in range(rows)]\n\n        dfs(root,0,(cols-1)//2)\n\n        return matrix","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"print-binary-tree","has_notes":false,"flag_type":1}