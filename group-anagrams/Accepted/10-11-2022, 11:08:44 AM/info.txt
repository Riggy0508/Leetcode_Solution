{"id":820317226,"lang":"python3","lang_name":"Python3","time":"4Â weeks","timestamp":1665511724,"status":10,"status_display":"Accepted","runtime":"111 ms","url":"/submissions/detail/820317226/","is_pending":"Not Pending","title":"Group Anagrams","memory":"20 MB","code":"# Because we wanna return list of list and we are gonna using the concept of hashing over here. Let's start with defining our hashmap with a default list \n# Late on, we are gonna traverse the independant word from the list and then it's indepened character. \n#Once that is done we are maintaining the count of each char of a string and then appending it onto the res list. After the loop's we will have a group of string's with the same hash value and we can return.\n#We are using tuple here because we don't wanna have any duplicate's plus there are mulitple objects that we are dealing with. \n\n#Reference : https://www.w3schools.com/python/python_tuples.asp\n\n\nclass Solution:\n    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:\n        res=defaultdict(list)\n        \n        for string in strs:\n            count=[0]*26\n            for char in string:\n                count[ord(char)-ord(\"a\")]+=1\n            res[tuple(count)].append(string)\n        return res.values()\n        \n        ","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"group-anagrams","has_notes":false,"notes":"","topic_tags":[]}