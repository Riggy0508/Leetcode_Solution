{"id":819689315,"lang":"python3","lang_name":"Python3","time":"4Â months, 2Â weeks","timestamp":1665440019,"status":10,"status_display":"Accepted","runtime":"101 ms","url":"/submissions/detail/819689315/","is_pending":"Not Pending","title":"Group Anagrams","memory":"19.8 MB","code":"# Because we wanna return list of list and we are gonna using the concept of hashing over here. Let's start with defining our hashmap with a default list \n# Late on, we are gonna traverse the independant word from the list and then it's indepened character. \n\n\nclass Solution:\n    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:\n        res=defaultdict(list)\n        \n        for string in strs:\n            count=[0]*26\n            for char in string:\n                count[ord(char)-ord(\"a\")]+=1\n            res[tuple(count)].append(string)\n        return res.values()\n        \n        ","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"group-anagrams","has_notes":false}