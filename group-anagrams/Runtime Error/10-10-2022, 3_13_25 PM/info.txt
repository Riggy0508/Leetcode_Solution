{"id":819689225,"question_id":49,"lang":"python3","lang_name":"Python3","time":"2Â years, 5Â months","timestamp":1665440005,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/819689225/","is_pending":"Not Pending","title":"Group Anagrams","memory":"N/A","code":"Because we wanna return list of list and we are gonna using the concept of hashing over here. Let's start with defining our hashmap with a default list \nLate on, we are gonna traverse the independant word from the list and then it's indepened character. \n\n\nclass Solution:\n    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:\n        res=defaultdict(list)\n        \n        for string in strs:\n            count=[0]*26\n            for char in string:\n                count[ord(char)-ord(\"a\")]+=1\n            res[tuple(count)].append(string)\n        return res.values()\n        \n        ","compare_result":"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"group-anagrams","has_notes":false,"flag_type":1}