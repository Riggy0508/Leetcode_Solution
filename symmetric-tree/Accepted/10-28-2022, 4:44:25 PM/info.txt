{"id":832359038,"question_id":101,"lang":"python3","lang_name":"Python3","time":"2 years, 3 months","timestamp":1667000665,"status":10,"status_display":"Accepted","runtime":"37 ms","url":"/submissions/detail/832359038/","is_pending":"Not Pending","title":"Symmetric Tree","memory":"13.9 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def isSymmetric(self, root: Optional[TreeNode]) -> bool:\n        if not root:\n            return True\n        return self.isMirror(root.left,root.right)\n    \n    def isMirror(self,leftroot,rightroot):\n        if leftroot and rightroot:\n            return leftroot.val==rightroot.val and (self.isMirror(leftroot.left,rightroot.right) and self.isMirror(leftroot.right,rightroot.left))\n        return leftroot==rightroot\n        \n        \n        \n        \n        \n        \n        \n#         if not root:\n#             return True\n        \n#         return self.isMirror(root.left,root.right)\n    \n#     def isMirror(self,left,right):\n#         if left and right:\n#             return left.val==right.val and self.isMirror(left.left,right.right) and self.isMirror(left.right,right.left)\n#         return left==right","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"symmetric-tree","has_notes":false,"flag_type":1}