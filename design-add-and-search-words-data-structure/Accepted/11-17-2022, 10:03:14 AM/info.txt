{"id":845342882,"lang":"python3","lang_name":"Python3","time":"3 months, 1 week","timestamp":1668708194,"status":10,"status_display":"Accepted","runtime":"6398 ms","url":"/submissions/detail/845342882/","is_pending":"Not Pending","title":"Design Add and Search Words Data Structure","memory":"78.3 MB","code":"class TrieNode:\n    def __init__(self):\n        self.children={}  #This is a trieNode\n        self.endOfWord=False    \n\nclass WordDictionary:\n    def __init__(self):\n        self.root=TrieNode()\n        self.len_of_max_word=0\n\n    def addWord(self, word: str) -> None:\n        cur=self.root\n        for w in word:\n            if w not in cur.children:\n                cur.children[w]=TrieNode()\n            cur=cur.children[w]\n        cur.endOfWord=True\n        self.len_of_max_word=max(self.len_of_max_word,len(word))\n\n    def search(self, word: str) -> bool:\n        if len(word)>self.len_of_max_word:\n            return False\n        def dfs(j,root):\n            cur=root\n            for i in range(j,len(word)):\n                w=word[i]\n                if w ==\".\":\n                    for child in cur.children.values():\n                        #print(child.children)\n                        if dfs(i+1,child):\n                            return True\n                    return False\n                else:\n                    if w not in cur.children:\n                        return False\n                    cur=cur.children[w]\n                    \n            return cur.endOfWord\n        \n        return dfs(0,self.root)\n    \n    \n# Your WordDictionary object will be instantiated and called as such:\n# obj = WordDictionary()\n# obj.addWord(word)\n# param_2 = obj.search(word)","compare_result":"11111111111111111111111111111","title_slug":"design-add-and-search-words-data-structure","has_notes":false}