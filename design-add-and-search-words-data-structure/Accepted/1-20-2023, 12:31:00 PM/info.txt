{"id":882039227,"question_id":211,"lang":"python3","lang_name":"Python3","time":"2 years, 1 month","timestamp":1674246660,"status":10,"status_display":"Accepted","runtime":"10521 ms","url":"/submissions/detail/882039227/","is_pending":"Not Pending","title":"Design Add and Search Words Data Structure","memory":"78.2 MB","code":"class TrieNode:\n    def __init__(self):\n        self.children={}\n        self.end=False\n\nclass WordDictionary:\n\n    def __init__(self):\n        self.root=TrieNode()\n\n    def addWord(self, word: str) -> None:\n        cur=self.root\n\n        for w in word:\n            if not w in cur.children:\n                cur.children[w]=TrieNode()\n            cur=cur.children[w]\n        cur.end=True\n        \n    def search(self, word: str) -> bool:\n        \n        def dfs(j,root):\n            cur=root\n            for i in range(j,len(word)):\n                c=word[i]\n\n                if c==\".\":\n                    for child in cur.children.values():\n                        if dfs(i+1,child):\n                            return True\n                    return False\n                else:\n                    if c not in cur.children:\n                        return False\n                    cur=cur.children[c]\n            return cur.end\n        return dfs(0,self.root)\n\n                \n\n\n        \n\n\n# Your WordDictionary object will be instantiated and called as such:\n# obj = WordDictionary()\n# obj.addWord(word)\n# param_2 = obj.search(word)","compare_result":"11111111111111111111111111111","title_slug":"design-add-and-search-words-data-structure","has_notes":false,"flag_type":1}