{"id":781611483,"lang":"python3","time":"1Â month","timestamp":1661292233,"status_display":"Accepted","runtime":"1205 ms","url":"/submissions/detail/781611483/","is_pending":"Not Pending","title":"Number of Longest Increasing Subsequence","memory":"14.1 MB","code":"class Solution:\n    def findNumberOfLIS(self, nums: List[int]) -> int:\n        if not nums: return 0\n        n = len(nums)\n        m, dp, cnt = 0, [1] * n, [1] * n\n        for i in range(n):\n            for j in range(i):\n                if nums[j] < nums[i]:\n                    if dp[i] < dp[j]+1: dp[i], cnt[i] = dp[j]+1, cnt[j]\n                    elif dp[i] == dp[j]+1: cnt[i] += cnt[j]\n            m = max(m, dp[i])                        \n        return sum(c for l, c in zip(dp, cnt) if l == m)","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"number-of-longest-increasing-subsequence"}