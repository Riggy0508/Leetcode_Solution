{"id":881962971,"lang":"python3","lang_name":"Python3","time":"1Â month","timestamp":1674237074,"status":10,"status_display":"Accepted","runtime":"171 ms","url":"/submissions/detail/881962971/","is_pending":"Not Pending","title":"Implement Trie (Prefix Tree)","memory":"31.7 MB","code":"class TrieNode:\n    def __init__(self):\n        self.endOfWord=False\n        self.children={}\n\nclass Trie:\n\n    def __init__(self):\n        self.root=TrieNode()\n\n    def insert(self, word: str) -> None:\n        cur=self.root\n        for w in word:\n            if not w in cur.children:\n                cur.children[w]=TrieNode()\n            cur=cur.children[w]\n        cur.endOfWord=True\n\n    def search(self, word: str) -> bool:\n        cur=self.root\n        for w in word:\n            if not w in cur.children:\n                return False\n            cur=cur.children[w]\n        return cur.endOfWord\n\n    def startsWith(self, prefix: str) -> bool:\n        cur=self.root\n\n        for p in prefix:\n            if p not in cur.children:\n                return False\n            cur=cur.children[p]\n        return True\n\n\n# Your Trie object will be instantiated and called as such:\n# obj = Trie()\n# obj.insert(word)\n# param_2 = obj.search(word)\n# param_3 = obj.startsWith(prefix)","compare_result":"1111111111111111","title_slug":"implement-trie-prefix-tree","has_notes":false}