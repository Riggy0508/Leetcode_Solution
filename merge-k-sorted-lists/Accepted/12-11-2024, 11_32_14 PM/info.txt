{"id":1476797428,"question_id":23,"lang":"python3","lang_name":"Python3","time":"2 months, 3 weeks","timestamp":1733988734,"status":10,"status_display":"Accepted","runtime":"11 ms","url":"/submissions/detail/1476797428/","is_pending":"Not Pending","title":"Merge k Sorted Lists","memory":"19.8 MB","code":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def mergeKLists(self, lists: List[Optional[ListNode]]) -> Optional[ListNode]:\n        \n        if not lists or len(lists)==0:\n            return None\n        \n        while len(lists)>1:\n            mergeList=[]\n            for i in range(0,len(lists),2):\n                l1=lists[i]\n                l2=lists[i+1] if (i+1)<len(lists) else None\n\n                mergeList.append(self.merge(l1,l2))\n            lists=mergeList\n        return lists[0]\n\n    \n    def merge(self,l1,l2):\n        dummyNode=ListNode()\n        prev=dummyNode\n\n        while l1 and l2:\n            if l1.val>=l2.val:\n                prev.next=l2\n                l2=l2.next\n            \n            elif l2.val>=l1.val:\n                prev.next=l1\n                l1=l1.next\n            \n            prev=prev.next\n        if l1:\n            prev.next=l1\n        if l2:\n            prev.next=l2\n\n        return dummyNode.next\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"merge-k-sorted-lists","has_notes":false,"flag_type":1}