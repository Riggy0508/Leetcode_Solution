{"id":806445811,"question_id":23,"lang":"python3","lang_name":"Python3","time":"2 years, 5 months","timestamp":1663890131,"status":10,"status_display":"Accepted","runtime":"228 ms","url":"/submissions/detail/806445811/","is_pending":"Not Pending","title":"Merge k Sorted Lists","memory":"17.7 MB","code":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def merge(self,l1,l2):\n        dummy=ListNode()\n        prev=dummy\n        \n        while l1 and l2:\n            if l1.val<=l2.val:\n                prev.next=l1\n                prev=prev.next\n                l1=l1.next\n            else:\n                prev.next=l2\n                prev=prev.next\n                l2=l2.next\n        if l1:\n            prev.next=l1\n        if l2:\n            prev.next=l2\n        return dummy.next\n                \n    \n    def mergeKLists(self, lists: List[Optional[ListNode]]) -> Optional[ListNode]:\n        \n        if not len(lists):\n            return None\n        while len(lists)>1:\n            newLists=[]\n            for i in range(0,len(lists),2):\n                list1=lists[i]\n                list2=lists[i+1] if (i+1)<len(lists) else None\n                mergeList=self.merge(list1,list2)\n                newLists.append(mergeList)\n            lists=newLists\n        return lists[0]\n            \n                       \n            ","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"merge-k-sorted-lists","has_notes":false,"flag_type":1}