{"id":688117468,"lang":"python3","time":"5Â months","timestamp":1651008059,"status_display":"Accepted","runtime":"189 ms","url":"/submissions/detail/688117468/","is_pending":"Not Pending","title":"Merge k Sorted Lists","memory":"17.5 MB","code":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def mergeKLists(self, lists: List[Optional[ListNode]]) -> Optional[ListNode]:\n        \n        if not lists or len(lists)==0:\n            return None\n        \n        while len(lists)>1:\n            mergedLists=[]\n            for i in range(0,len(lists),2):\n                l1=lists[i]\n                l2=lists[i+1] if (i+1)<len(lists) else None\n                mergedLists.append(self.mergeList(l1,l2))\n            lists=mergedLists\n        return lists[0]\n        \"\"\"\n        if not lists or len(lists)==0:\n            return None\n        \n        while len(lists)>1:\n            mergedLists=[]\n            for i in range(0,len(lists),2):\n                l1=lists[i]\n                l2=lists[i+1] if (i+1)<len(lists) else None\n                mergedLists.append((self.mergeList(l1,l2)))\n            lists=mergedLists\n        return lists[0]\n        \"\"\"\n    def mergeList(self,l1,l2):\n        dummy=ListNode()\n        tail=dummy\n         \n        while l1 and l2:\n            if l1.val<l2.val:\n                tail.next=l1\n                l1=l1.next\n            else:\n                tail.next=l2\n                l2=l2.next\n            tail=tail.next\n            \n        if l1:\n            tail.next=l1\n        elif l2:\n            tail.next=l2\n        return dummy.next","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"merge-k-sorted-lists"}