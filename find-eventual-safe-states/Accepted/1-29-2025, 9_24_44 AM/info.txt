{"id":1524587664,"question_id":820,"lang":"python3","lang_name":"Python3","time":"1Â month, 1Â week","timestamp":1738171484,"status":10,"status_display":"Accepted","runtime":"27 ms","url":"/submissions/detail/1524587664/","is_pending":"Not Pending","title":"Find Eventual Safe States","memory":"23.7 MB","code":"class Solution:\n    def eventualSafeNodes(self, graph: List[List[int]]) -> List[int]:\n        n=len(graph)\n        safe={}\n\n        def dfs(i):\n            if i in safe:\n                return safe[i]\n            safe[i]=False\n\n            for nei in graph[i]:\n                if not dfs(nei):\n                    return safe[i]\n            safe[i]=True\n            return safe[i]\n            \n        res=[]\n        for i in range (n):\n            if dfs(i):\n                res.append(i)\n        return res","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-eventual-safe-states","has_notes":false,"flag_type":1}