{"id":844698651,"question_id":131,"lang":"python3","lang_name":"Python3","time":"2 years, 3 months","timestamp":1668620144,"status":10,"status_display":"Accepted","runtime":"1747 ms","url":"/submissions/detail/844698651/","is_pending":"Not Pending","title":"Palindrome Partitioning","memory":"30.4 MB","code":"class Solution:\n    def partition(self, s: str) -> List[List[str]]:\n        \n        output=[]\n        list1=[]\n        def backtrack(i):\n            if i==len(s):\n                output.append(list1.copy())\n                return\n            \n            for j in range(i,len(s)):\n                if self.isPalindrome(i,j,s):\n                    list1.append(s[i:j+1])\n                    backtrack(j+1)\n                    list1.pop()\n\n        backtrack(0)\n        return output\n    \n    def isPalindrome(self,l,r,s):\n        \n        while l<=r:\n            if s[l]==s[r]:\n                l+=1\n                r-=1\n            else:\n                return False\n        return True","compare_result":"11111111111111111111111111111111","title_slug":"palindrome-partitioning","has_notes":false,"flag_type":1}