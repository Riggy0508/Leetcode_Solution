{"id":841004542,"lang":"python3","lang_name":"Python3","time":"3 months, 2 weeks","timestamp":1668118244,"status":10,"status_display":"Accepted","runtime":"811 ms","url":"/submissions/detail/841004542/","is_pending":"Not Pending","title":"Palindrome Partitioning","memory":"30.2 MB","code":"class Solution:\n    def partition(self, s: str) -> List[List[str]]:\n        \n        output=[]\n        res1=[]\n        def backtrack(i):\n            if i>=len(s):\n                output.append(res1.copy())\n                \n                \n            for j in range(i,len(s)):\n                if self.palindrone(i,j,s):\n                    res1.append(s[i:j+1])\n                    backtrack(j+1)\n                    res1.pop()\n    \n        backtrack(0)\n        return output\n        \n        \n        \n        \n    def palindrone(self,l,r,s):\n        while l<=r:\n            if s[l]==s[r]:\n                l+=1\n                r-=1\n            else:\n                return False\n        return True\n            \n        ","compare_result":"11111111111111111111111111111111","title_slug":"palindrome-partitioning","has_notes":false}