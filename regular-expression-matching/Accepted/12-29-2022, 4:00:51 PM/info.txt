{"id":867783550,"lang":"python3","lang_name":"Python3","time":"1 month, 3 weeks","timestamp":1672358451,"status":10,"status_display":"Accepted","runtime":"52 ms","url":"/submissions/detail/867783550/","is_pending":"Not Pending","title":"Regular Expression Matching","memory":"14.3 MB","code":"class Solution:\n    def isMatch(self, s: str, p: str) -> bool:\n        #We are now essentially gonna using the concept of caching in order to reduce the repeated work\n\n        cache={}\n\n\n        def dfs(i,j):\n            if (i,j) in cache:\n                return cache[(i,j)]\n            if i>=len(s) and j>=len(p):\n                return True\n            if j>=len(p):\n                return False\n\n            match=i<len(s) and (s[i]==p[j] or p[j]==\".\")\n\n            if (j+1)<len(p) and p[j+1]==\"*\":\n                cache[(i,j)]= (dfs(i,j+2) or\n                        (match and dfs(i+1,j)))\n                return cache[(i,j)]\n            if match:\n                 cache[(i,j)]=dfs(i+1,j+1)\n                 return cache[(i,j)]\n\n            cache[(i,j)]=False\n            return False\n        return dfs(0,0)","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"regular-expression-matching","has_notes":false}