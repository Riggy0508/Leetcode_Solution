{"id":807170113,"question_id":17,"lang":"python3","lang_name":"Python3","time":"2 years, 4 months","timestamp":1663979013,"status":10,"status_display":"Accepted","runtime":"57 ms","url":"/submissions/detail/807170113/","is_pending":"Not Pending","title":"Letter Combinations of a Phone Number","memory":"14 MB","code":"class Solution:\n    def letterCombinations(self, digits: str) -> List[str]:\n        letters = {\"2\": \"abc\", \"3\": \"def\", \"4\": \"ghi\", \"5\": \"jkl\", \"6\": \"mno\", \"7\": \"pqrs\", \"8\": \"tuv\", \"9\": \"wxyz\"}\n        if len(digits)==0:\n            return []\n        \n        \n        \n        \n        def backtrack(index,path):\n            if len(path)==len(digits):\n                combinations.append(\"\".join(path))\n                return\n            \n            combo=letters[digits[index]]\n            for i in combo:\n                path.append(i)\n                \n                backtrack(index+1,path)\n                \n                path.pop()\n        \n        \n        \n        \n        \n        \n        \n        combinations=[]\n        backtrack(0,[])\n        \n        return combinations","compare_result":"1111111111111111111111111","title_slug":"letter-combinations-of-a-phone-number","has_notes":false,"flag_type":1}