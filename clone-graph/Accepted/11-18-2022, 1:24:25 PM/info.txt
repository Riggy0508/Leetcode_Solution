{"id":846042529,"lang":"python3","lang_name":"Python3","time":"3 months, 1 week","timestamp":1668806665,"status":10,"status_display":"Accepted","runtime":"87 ms","url":"/submissions/detail/846042529/","is_pending":"Not Pending","title":"Clone Graph","memory":"14.4 MB","code":"\"\"\"\n# Definition for a Node.\nclass Node:\n    def __init__(self, val = 0, neighbors = None):\n        self.val = val\n        self.neighbors = neighbors if neighbors is not None else []\n\"\"\"\n\nclass Solution:\n    def cloneGraph(self, node: 'Node') -> 'Node':\n        oldToNew={}\n        \n        def dfs(root):\n            if root in oldToNew:\n                return oldToNew[root]\n            \n            copy=Node(root.val)\n            oldToNew[root]=copy\n            \n            for n in root.neighbors:\n                copy.neighbors.append(dfs(n))\n            \n            return copy\n            \n            \n            \n            \n        return dfs(node) if node else None\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        oldToNew={}\n        def dfs(root):\n            \n            if root in oldToNew:\n                return oldToNew[root]\n            \n            copy=Node(root.val)\n            oldToNew[root]=copy\n            \n            for n in root.neighbors:\n                copy.neighbors.append(dfs(n))\n            \n            return copy\n\n        return dfs(node) if node else None","compare_result":"1111111111111111111111","title_slug":"clone-graph","has_notes":false}