{"id":844737388,"lang":"python3","lang_name":"Python3","time":"3 months, 1 week","timestamp":1668623969,"status":10,"status_display":"Accepted","runtime":"83 ms","url":"/submissions/detail/844737388/","is_pending":"Not Pending","title":"Clone Graph","memory":"14.5 MB","code":"\"\"\"\n# Definition for a Node.\nclass Node:\n    def __init__(self, val = 0, neighbors = None):\n        self.val = val\n        self.neighbors = neighbors if neighbors is not None else []\n\"\"\"\n\nclass Solution:\n    def cloneGraph(self, node: 'Node') -> 'Node':\n        #We are maintaining a hashmap to map all the old node's to there new node(essentially Copy)\n        oldToNew={}\n        \n        def dfs(root):\n            #We are gonna check if this root is already present in our hashmap if yes, we will return it's value\n            if root in oldToNew:\n                return oldToNew[root]\n            \n            #if the root is not present in the hashmap we will create a copy of it and add it into the hashmap.\n            copy=Node(root.val)\n            oldToNew[root]=copy\n            \n            #Once done with that we are gonna check with the root's neighbor's\n            for n in root.neighbors:\n                #create a copy of this neighbors\n                copy.neighbors.append(dfs(n))\n                \n            return copy\n\n        return dfs(node) if node else None","compare_result":"1111111111111111111111","title_slug":"clone-graph","has_notes":false}