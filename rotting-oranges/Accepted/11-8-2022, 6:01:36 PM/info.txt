{"id":839795289,"lang":"python3","lang_name":"Python3","time":"3 months, 2 weeks","timestamp":1667959296,"status":10,"status_display":"Accepted","runtime":"46 ms","url":"/submissions/detail/839795289/","is_pending":"Not Pending","title":"Rotting Oranges","memory":"13.8 MB","code":"class Solution:\n    def orangesRotting(self, grid: List[List[int]]) -> int:\n        rows,cols=len(grid),len(grid[0])\n        q=collections.deque()\n        #Making count of the total rotten_oranges and adding it into the queue\n        \n        fresh=0\n        time_lapsed=-1\n        for r in range(rows):\n            for c in range(cols):\n                if grid[r][c]==2:\n                    q.append((r,c))\n                elif grid[r][c]==1:\n                    fresh+=1\n                    \n        direction=((0,1),(0,-1),(1,0),(-1,0))\n        \n        q.append((-1,-1))\n        \n        while q:\n            row,col=q.popleft()\n            \n            if row==-1:\n                time_lapsed+=1\n                if q:\n                    q.append((-1,-1))\n            else:\n                for d in direction:\n                    neigh_row=row+d[0]\n                    neigh_col=col+d[1]\n                    if rows>neigh_row>=0 and cols>neigh_col>=0:\n                        if grid[neigh_row][neigh_col]==1:\n                            grid[neigh_row][neigh_col]=2\n                            fresh-=1\n                            q.append((neigh_row,neigh_col))\n\n        return time_lapsed if fresh==0 else -1\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n#         #Count the number of fresh oranges and rotten oranges\n#         q=collections.deque()\n        \n#         fresh=0\n#         ROWS,COLS=len(grid),len(grid[0])\n        \n#         for r in range(ROWS):\n#             for c in range(COLS):\n#                 if grid[r][c]==2:\n#                     q.append((r,c))\n#                 elif grid[r][c]==1:\n#                     fresh+=1\n                    \n        \n#         #Checking if any oranges are rotten and if they are, make the neig one rotten too. \n#         time_lapsed=-1\n        \n#         #Defining the directions which we can go into\n        \n#         direction=[(-1,0),(1,0),(0,-1),(0,1)] \n        \n#         #Creating boundary/level so that we can increase the time_lapse each time we go onto the next level.\n#         q.append((-1,-1))\n#         while q:\n#             row,col=q.popleft()\n            \n#             #Checking if we have gone to the next level because we need to maintain the timestamp\n#             if row==-1:\n#                 time_lapsed+=1\n#                 #Creating another boundary\n#                 if q:\n#                     q.append((-1,-1))\n#             else:\n                \n#                 # Procedure to check in other direction's \n#                 for d in direction:\n#                     neigh_row,neigh_col=d[0]+row, d[1]+col\n#                     if ROWS>neigh_row>=0 and COLS>neigh_col>=0:\n                        \n#                         #checking if the neighhour's are present and if they are fresh, rotten tem\n#                         if grid[neigh_row][neigh_col]==1:\n#                             grid[neigh_row][neigh_col]=2\n#                             fresh-=1\n                            \n#                             q.append((neigh_row,neigh_col))\n                            \n#         return time_lapsed if fresh==0 else -1\n                        \n            \n        \n                    ","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"rotting-oranges","has_notes":false}