{"id":759250156,"lang":"python3","time":"1 month, 4 weeks","timestamp":1659032554,"status_display":"Accepted","runtime":"87 ms","url":"/submissions/detail/759250156/","is_pending":"Not Pending","title":"Minimum Window Substring","memory":"14.8 MB","code":"class Solution:\n    def minWindow(self, s: str, t: str) -> str:\n        if t==\"\": return \"\"\n        \n        countT,window={},{}\n        \n        for c in t:\n            countT[c]=1+countT.get(c,0)\n            \n        have,need=0,len(countT)\n        res,resLen=[-1,-1], float(\"infinity\")\n        l=0\n        \n        for r in range(len(s)):\n            c=s[r]\n            window[c]=1+window.get(c,0)\n            \n            if c in countT and window[c]==countT[c]:\n                have+=1\n            \n            while have==need:\n                #\n                if (r-l+1)<resLen:\n                    res=[l,r]\n                    resLen=(r-l+1)\n                    \n                window[s[l]]-=1\n                if s[l] in countT and window[s[l]]<countT[s[l]]:\n                    have-=1\n                l+=1\n        l,r=res\n        return s[l:r+1] if resLen != float(\"infinity\") else \"\"\n            \n            ","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-window-substring"}