{"id":1486145773,"question_id":652,"lang":"python3","lang_name":"Python3","time":"2 months, 2 weeks","timestamp":1734945818,"status":10,"status_display":"Accepted","runtime":"12 ms","url":"/submissions/detail/1486145773/","is_pending":"Not Pending","title":"Find Duplicate Subtrees","memory":"29.9 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def findDuplicateSubtrees(self, root: Optional[TreeNode]) -> List[Optional[TreeNode]]:\n\n        subtrees=defaultdict(list)\n\n        def dfs(node):\n            if not node:\n                return \"null\"\n            s=\",\".join([str(node.val),dfs(node.left),dfs(node.right)])\n            if len(subtrees[s])==1:\n                res.append(node)\n            subtrees[s].append(node)\n            return s\n        \n        res=[]\n        dfs(root)\n        return res\n        ","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-duplicate-subtrees","has_notes":false,"flag_type":1}