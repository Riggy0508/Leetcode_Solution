{"id":1556833948,"question_id":1029,"lang":"python3","lang_name":"Python3","time":"1 week, 3 days","timestamp":1740636455,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1556833948/","is_pending":"Not Pending","title":"Vertical Order Traversal of a Binary Tree","memory":"18 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def verticalTraversal(self, root: Optional[TreeNode]) -> List[List[int]]:\n        \n        hash1=defaultdict(list)\n\n        q=deque([(root,0,0)])\n\n        while q:\n            node,row,col=q.popleft()\n            hash1[col].append((row,node.val))\n\n            if node.left:\n                q.append((node.left,row+1,col-1))\n\n            if node.right:\n                q.append((node.right,row+1,col+1))\n\n        sort=sorted(hash1.keys())\n\n        def customSort(t):\n            return (t[0],t[1])\n\n        result=[]\n        for val in sort:\n            index=hash1[val]\n            index.sort(key=customSort)\n            print(index)\n\n            result.append([i for _,i in index])\n\n        return result","compare_result":"1111111111111111111111111111111111","title_slug":"vertical-order-traversal-of-a-binary-tree","has_notes":false,"flag_type":1}