{"id":1535240662,"question_id":1029,"lang":"python3","lang_name":"Python3","time":"1 week, 5 days","timestamp":1738969907,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1535240662/","is_pending":"Not Pending","title":"Vertical Order Traversal of a Binary Tree","memory":"18.2 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def verticalTraversal(self, root: Optional[TreeNode]) -> List[List[int]]:\n        if not root:\n            return []\n\n        col_map=defaultdict(list)\n        \n        q=deque([(root,0,0)])\n\n        while q:\n            node,row,col=q.popleft()\n\n            if node:\n                col_map[col].append((row,node.val))\n            \n            if node.left:\n                q.append((node.left,row+1,col-1))\n            if node.right:\n                q.append((node.right,row+1,col+1))\n            \n\n        sorted_col=sorted(col_map.keys())\n        def custom_sort(t):\n            return (t[0],t[1])\n        result=[]\n        for col in sorted_col:\n            col_node=col_map[col]\n\n            col_node.sort(key=custom_sort)\n\n            result.append([val for i,val in col_node])\n\n        return result\n\n        \n\n","compare_result":"1111111111111111111111111111111111","title_slug":"vertical-order-traversal-of-a-binary-tree","has_notes":false,"flag_type":1}