{"id":684961918,"lang":"python3","time":"5Â months","timestamp":1650566718,"status_display":"Accepted","runtime":"1065 ms","url":"/submissions/detail/684961918/","is_pending":"Not Pending","title":"LRU Cache","memory":"76.6 MB","code":"class Node:\n    def __init__(self, key, val):\n        self.key, self.val = key, val\n        self.prev = self.next = None\n    \nclass LRUCache:\n\n    def __init__(self, capacity: int):\n        self.cap=capacity\n        self.left, self.right = Node(0, 0), Node(0, 0)\n        \n        self.cache={}\n        self.left.next,self.right.prev=self.right,self.left \n    def remove(self,node):\n        prev,nxt=node.prev,node.next\n        prev.next,nxt.prev=nxt,prev\n        \n    def insert(self,node):\n        prev,nxt=self.right.prev,self.right\n        prev.next=nxt.prev=node\n        node.next,node.prev=nxt,prev\n\n    def get(self, key: int) -> int:\n        if key in self.cache:\n            self.remove(self.cache[key])\n            self.insert(self.cache[key])\n            return self.cache[key].val\n        return -1\n        \n    def put(self, key: int, value: int) -> None:\n        if key in self.cache:\n            self.remove(self.cache[key])\n        self.cache[key]=Node(key,value)\n        self.insert(self.cache[key])\n        \n        if len(self.cache)>self.cap:\n            lru=self.left.next\n            self.remove(lru)\n            del self.cache[lru.key]\n        \n\n# Your LRUCache object will be instantiated and called as such:\n# obj = LRUCache(capacity)\n# param_1 = obj.get(key)\n# obj.put(key,value)","compare_result":"1111111111111111111111","title_slug":"lru-cache"}