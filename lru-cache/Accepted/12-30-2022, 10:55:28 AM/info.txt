{"id":868211559,"lang":"python3","lang_name":"Python3","time":"1 month, 3 weeks","timestamp":1672426528,"status":10,"status_display":"Accepted","runtime":"770 ms","url":"/submissions/detail/868211559/","is_pending":"Not Pending","title":"LRU Cache","memory":"75.3 MB","code":"from collections import OrderedDict\nclass LRUCache(OrderedDict):\n\n    def __init__(self, capacity: int):\n        self.capacity=capacity\n        \n    def get(self, key: int) -> int:\n        if key not in self:\n            return -1\n        self.move_to_end(key)\n        return self[key]\n    def put(self, key: int, value: int) -> None:\n        if key in self:\n            self[key]=value\n            self.move_to_end(key)\n        self[key]=value\n        if len(self)>self.capacity:\n            self.popitem(last=False)\n        \n\n\n# Your LRUCache object will be instantiated and called as such:\n# obj = LRUCache(capacity)\n# param_1 = obj.get(key)\n# obj.put(key,value)","compare_result":"1111111111111111111111","title_slug":"lru-cache","has_notes":false}