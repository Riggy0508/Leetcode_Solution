{"id":810154526,"lang":"python3","lang_name":"Python3","time":"1 month, 1 week","timestamp":1664319222,"status":10,"status_display":"Accepted","runtime":"61 ms","url":"/submissions/detail/810154526/","is_pending":"Not Pending","title":"Linked List Cycle","memory":"17.6 MB","code":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def hasCycle(self, head: Optional[ListNode]) -> bool:\n        if head is None:\n            return False\n        slow,fast=head,head.next\n        \n        while fast is not None and fast.next is not None:\n            if slow!=fast:\n                slow=slow.next\n                fast=fast.next.next\n            elif slow==fast:\n                return True\n        return False","compare_result":"1111111111111111111111","title_slug":"linked-list-cycle","has_notes":false,"notes":"","topic_tags":[]}