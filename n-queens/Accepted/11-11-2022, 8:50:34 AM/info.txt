{"id":841468366,"lang":"python3","lang_name":"Python3","time":"3 months, 2 weeks","timestamp":1668185434,"status":10,"status_display":"Accepted","runtime":"97 ms","url":"/submissions/detail/841468366/","is_pending":"Not Pending","title":"N-Queens","memory":"14.5 MB","code":"class Solution:\n    def solveNQueens(self, n: int) -> List[List[str]]:\n        col=set()\n        pos_diag=set()\n        neg_diag=set()\n        \n        output=[]\n        board=[[\".\"]*n for i in range(n)]\n        \n        def backtrack(r):\n            if r==n:\n                curr=[\"\".join(row) for row in board]\n                output.append(curr.copy())\n                return output\n            \n            for c in range(n):\n                if c in col or (r+c) in pos_diag or (r-c) in neg_diag:\n                    continue\n                    \n                col.add(c)\n                pos_diag.add(r+c)\n                neg_diag.add(r-c)\n                board[r][c]=\"Q\"\n                \n                backtrack(r+1)\n                \n                col.remove(c)\n                pos_diag.remove(r+c)\n                neg_diag.remove(r-c)\n                board[r][c]=\".\"\n                \n\n        backtrack(0)\n        return output\n        ","compare_result":"111111111","title_slug":"n-queens","has_notes":false}