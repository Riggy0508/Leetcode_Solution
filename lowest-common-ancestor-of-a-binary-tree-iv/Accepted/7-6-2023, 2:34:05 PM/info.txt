{"id":988125754,"question_id":1816,"lang":"python3","lang_name":"Python3","time":"1 year, 7 months","timestamp":1688679245,"status":10,"status_display":"Accepted","runtime":"144 ms","url":"/submissions/detail/988125754/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Tree IV","memory":"21.9 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def lowestCommonAncestor(self, root: 'TreeNode', nodes: 'List[TreeNode]') -> 'TreeNode':\n        def dfs(root):\n            if not root or root.val in s:\n                return root\n            left,right=dfs(root.left),dfs(root.right)\n            if left and right:\n                return root\n            return left or right\n\n\n\n        s={node.val for node in nodes}\n        return dfs(root)","compare_result":"111111111111111111111111111111111111111111111111111111111","title_slug":"lowest-common-ancestor-of-a-binary-tree-iv","has_notes":false,"flag_type":1}