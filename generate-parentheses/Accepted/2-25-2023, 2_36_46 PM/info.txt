{"id":904934702,"question_id":22,"lang":"python3","lang_name":"Python3","time":"2Â years","timestamp":1677364606,"status":10,"status_display":"Accepted","runtime":"36 ms","url":"/submissions/detail/904934702/","is_pending":"Not Pending","title":"Generate Parentheses","memory":"14.2 MB","code":"class Solution:\n    def generateParenthesis(self, n: int) -> List[str]:\n        res=[]\n        stack=[]\n\n        def backtrack(openP,closeP):\n\n            if openP==closeP==n:\n                res.append(\"\".join(stack))\n                return \n\n            if openP<n:\n                stack.append(\"(\")\n                backtrack(openP+1,closeP)\n                stack.pop()\n\n            if closeP<openP:\n                stack.append(\")\")\n                backtrack(openP,closeP+1)\n                stack.pop()\n\n        backtrack(0,0)\n        return res\n\n","compare_result":"11111111","title_slug":"generate-parentheses","has_notes":false,"flag_type":1}