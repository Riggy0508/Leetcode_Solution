{"id":753124648,"lang":"python3","time":"2Â months","timestamp":1658428209,"status_display":"Accepted","runtime":"472 ms","url":"/submissions/detail/753124648/","is_pending":"Not Pending","title":"Pacific Atlantic Water Flow","memory":"15.8 MB","code":"class Solution:\n\n    def pacificAtlantic(self, heights: List[List[int]]) -> List[List[int]]:\n        m, n = len(heights), len(heights[0])\n        v_pac = set()\n        v_atl = set()\n        \n        def dfs(v_set, row, col, curr_height):\n            if row < 0 or row >= m or \\\n                col < 0 or col >= n or \\\n                    (row,col) in v_set or \\\n                        curr_height > heights[row][col]:\n                return\n            v_set.add((row, col))\n\n            curr_height = heights[row][col]\n            dfs(v_set, row + 1, col, curr_height)\n            dfs(v_set, row - 1, col, curr_height)\n            dfs(v_set, row, col + 1, curr_height)\n            dfs(v_set, row, col - 1, curr_height)\n\n        for col in range(n):\n            dfs(v_pac, 0, col, heights[0][col]) # First row\n            dfs(v_atl, m - 1, col, heights[m-1][col]) # Last row\n\n        for row in range(m):\n            dfs(v_pac, row, 0, heights[row][0]) # First column\n            dfs(v_atl, row, n-1, heights[row][n-1]) # Last column\n\n\n        result = v_atl.intersection(v_pac)\n\n        return result","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"pacific-atlantic-water-flow"}