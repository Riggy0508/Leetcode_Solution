{"id":1530412476,"question_id":114,"lang":"python3","lang_name":"Python3","time":"1Â month","timestamp":1738631778,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1530412476/","is_pending":"Not Pending","title":"Flatten Binary Tree to Linked List","memory":"18 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def flatten(self, root: Optional[TreeNode]) -> None:\n        \"\"\"\n        Do not return anything, modify root in-place instead.\n        \"\"\"\n        def dfs(node):\n            if not node:\n                return None\n            \n            if not node.left and not node.right:\n                return node\n\n            left=dfs(node.left)\n            right=dfs(node.right)\n\n            if left:\n                left.right=node.right\n                node.right=node.left\n                node.left=None\n\n            return right if right else left\n\n\n        dfs(root)","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"flatten-binary-tree-to-linked-list","has_notes":false,"flag_type":1}