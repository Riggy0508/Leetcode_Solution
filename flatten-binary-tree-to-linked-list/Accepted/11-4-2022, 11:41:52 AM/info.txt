{"id":836923964,"question_id":114,"lang":"python3","lang_name":"Python3","time":"2 years, 3 months","timestamp":1667587312,"status":10,"status_display":"Accepted","runtime":"78 ms","url":"/submissions/detail/836923964/","is_pending":"Not Pending","title":"Flatten Binary Tree to Linked List","memory":"15.1 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def flatten(self, root: Optional[TreeNode]) -> None:\n        \"\"\"\n        Do not return anything, modify root in-place instead.\n        \"\"\"\n        #Pre-order Traversal = Root, Left, Right\n        \n        def dfs(node):\n            if not node:\n                return None\n        \n            leftTail=self.flatten(node.left)\n            rightTail=self.flatten(node.right)\n\n            if leftTail:\n                leftTail.right=node.right\n                node.right=node.left\n                node.left=None\n                \n            ans=rightTail or leftTail or node\n\n            return ans\n        \n        return dfs(root)\n        \n        \n        ","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"flatten-binary-tree-to-linked-list","has_notes":false,"flag_type":1}