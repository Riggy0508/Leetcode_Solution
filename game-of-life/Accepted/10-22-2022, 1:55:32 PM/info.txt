{"id":828150304,"question_id":289,"lang":"python3","lang_name":"Python3","time":"2 years, 4 months","timestamp":1666472132,"status":10,"status_display":"Accepted","runtime":"75 ms","url":"/submissions/detail/828150304/","is_pending":"Not Pending","title":"Game of Life","memory":"14 MB","code":"class Solution:\n    def gameOfLife(self, board: List[List[int]]) -> None:\n        \"\"\"\n        Do not return anything, modify board in-place instead.\n        \"\"\"\n        rows=len(board)\n        cols=len(board[0])\n        \n        direction=[(-1, 0), (1,0), (0,-1), (0, 1), (-1, -1), (-1, 1), (1, -1), (1, 1)]\n        \n        for i in range(rows):\n            for j in range(cols):\n                number_of_live_cells=0\n                for dir1 in direction:\n                    new_row=(i+dir1[0])\n                    new_col=(j+dir1[1])\n                    \n                    if (new_row>=0 and new_row<rows) and (new_col>=0 and new_col<cols) and (board[new_row][new_col]==1 or board[new_row][new_col]==2):\n                        number_of_live_cells  +=1\n                    \n                    \n                if board[i][j]==1 and (number_of_live_cells<2 or number_of_live_cells>3):\n                    board[i][j]=2\n                if board[i][j]==0 and number_of_live_cells==3:\n                    board[i][j]=3\n                    \n        for i in range(rows):\n            for j in range(cols):\n                if board[i][j] == 2:\n                    board[i][j] = 0\n                elif board[i][j] == 3:\n                     board[i][j] = 1","compare_result":"1111111111111111111111","title_slug":"game-of-life","has_notes":false,"flag_type":1}