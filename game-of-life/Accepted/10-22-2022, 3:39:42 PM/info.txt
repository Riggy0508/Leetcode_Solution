{"id":828189310,"lang":"python3","lang_name":"Python3","time":"4Â months","timestamp":1666478382,"status":10,"status_display":"Accepted","runtime":"57 ms","url":"/submissions/detail/828189310/","is_pending":"Not Pending","title":"Game of Life","memory":"14.1 MB","code":"class Solution:\n    def gameOfLife(self, board: List[List[int]]) -> None:\n        \"\"\"\n        Do not return anything, modify board in-place instead.\n        \"\"\"\n        rows=len(board)\n        cols=len(board[0])\n        \n        direction=[(1,1),(1,-1),(0,1),(0,-1),(1,0),(-1,0),(-1,-1),(-1,1)]\n        \n        for i in range(rows):\n            for j in range(cols):\n                live_neighbors_count=0\n                for dr in direction:\n                    nr=(i+dr[0])\n                    nc=(j+dr[1])\n                    \n                    if (nr>=0 and nr<rows) and (nc>=0 and nc<cols) and (board[nr][nc]==1 or board[nr][nc]==2):\n                        live_neighbors_count+=1\n                    #print(live_neighbors_count)\n            \n            \n            #2==live_to_die\n            #3==dead_to_alive\n                if board[i][j]==1 and (live_neighbors_count<2 or live_neighbors_count>3):\n                    board[i][j]=2\n                if board[i][j]==0 and live_neighbors_count==3:\n                    board[i][j]=3\n                \n                \n        for i in range(rows):\n            for j in range(cols):\n                if board[i][j]==2:\n                    board[i][j]=0\n                elif board[i][j]==3:\n                    board[i][j]=1\n                ","compare_result":"1111111111111111111111","title_slug":"game-of-life","has_notes":false}