{"id":875648834,"lang":"python3","lang_name":"Python3","time":"1 month, 2 weeks","timestamp":1673376732,"status":10,"status_display":"Accepted","runtime":"125 ms","url":"/submissions/detail/875648834/","is_pending":"Not Pending","title":"Subtree of Another Tree","memory":"15 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def isSubtree(self, s: Optional[TreeNode], t: Optional[TreeNode]) -> bool:\n        if not t:return True\n        if not s:return False\n\n        if self.sameTree(s,t):\n            return True\n        return self.isSubtree(s.left,t) or self.isSubtree(s.right,t)\n\n\n    def sameTree(self,s,t):\n        if not t and not s:\n            return True\n        \n        if s and t and s.val==t.val:\n            return (self.sameTree(s.left,t.left) and self.sameTree(s.right,t.right))\n        return False\n\n\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"subtree-of-another-tree","has_notes":false}