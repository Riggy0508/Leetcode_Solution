{"id":772905560,"lang":"python3","time":"1 month, 1 week","timestamp":1660424170,"status_display":"Accepted","runtime":"169 ms","url":"/submissions/detail/772905560/","is_pending":"Not Pending","title":"Subtree of Another Tree","memory":"15 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def isSubtree(self, s: Optional[TreeNode], t: Optional[TreeNode]) -> bool:\n        if not t:return True\n        if not s: return False\n        \n        \n        if self.sameTree(s,t):\n            return True\n        return (self.isSubtree(s.right,t)or self.isSubtree(s.left,t))\n    \n    def sameTree(self,s,t):\n        if not s and not t:\n            return True\n        if s and t and s.val==t.val:\n            return (self.sameTree(s.left,t.left) and self.sameTree(s.right,t.right))\n        return False","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"subtree-of-another-tree"}