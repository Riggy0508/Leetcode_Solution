{"id":772903755,"lang":"python3","time":"1 month, 1 week","timestamp":1660423952,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/772903755/","is_pending":"Not Pending","title":"Subtree of Another Tree","memory":"N/A","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def isSubtree(self, root: Optional[TreeNode], subRoot: Optional[TreeNode]) -> bool:\n        if not root:return True\n        if not subRoot: return False\n        \n        \n        if self.sameTree(subRoot,root):\n            return True\n        return (self.isSubtree(subRoot.right,root)or self.isSubtree(subRoot.left,root))\n    \n    def sameTree(self,subRoot,root):\n        if not subRoot and not root:\n            return True\n        if subRoot and root and subRoot.val==root.val:\n            return (self.sameTree(subRoot.left,root.left) and self.sameTree(subRoot.right,root.right))\n        return False","compare_result":"10010110000110000000000000000000011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000","title_slug":"subtree-of-another-tree"}