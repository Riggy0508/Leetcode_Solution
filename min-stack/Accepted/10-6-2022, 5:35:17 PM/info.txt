{"id":816857241,"lang":"python3","lang_name":"Python3","time":"1Â month","timestamp":1665102917,"status":10,"status_display":"Accepted","runtime":"57 ms","url":"/submissions/detail/816857241/","is_pending":"Not Pending","title":"Min Stack","memory":"18 MB","code":"class MinStack:\n\n    def __init__(self):\n        self.stack1=[]\n        self.minstack=[]\n\n    def push(self, val: int) -> None:\n        self.stack1.append(val)\n        #calculating the minimum value in the stack1 and then appending that onto minstack\n        val=min(val,self.minstack[-1] if self.minstack else val)\n        self.minstack.append(val)\n\n    def pop(self) -> None:\n        self.stack1.pop()\n        self.minstack.pop()\n\n    def top(self) -> int:\n        return self.stack1[-1]\n\n    def getMin(self) -> int:\n        return self.minstack[-1]\n\n\n# Your MinStack object will be instantiated and called as such:\n# obj = MinStack()\n# obj.push(val)\n# obj.pop()\n# param_3 = obj.top()\n# param_4 = obj.getMin()","compare_result":"1111111111111111111111111111111","title_slug":"min-stack","has_notes":false,"notes":"","topic_tags":[]}