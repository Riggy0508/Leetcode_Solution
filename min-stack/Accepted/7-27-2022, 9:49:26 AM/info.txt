{"id":758264587,"lang":"python3","time":"2Â months","timestamp":1658940566,"status_display":"Accepted","runtime":"71 ms","url":"/submissions/detail/758264587/","is_pending":"Not Pending","title":"Min Stack","memory":"18.2 MB","code":"class MinStack:\n\n    def __init__(self):\n        self.stack=[]\n        self.minStack=[]\n\n    def push(self, val: int) -> None:\n        self.stack.append(val)\n        val=min(val,self.minStack[-1] if self.minStack else val)\n        self.minStack.append(val)\n        \n\n    def pop(self) -> None:\n        self.stack.pop()\n        self.minStack.pop()\n\n    def top(self) -> int:\n        return self.stack[-1]\n\n    def getMin(self) -> int:\n        return self.minStack[-1]\n\n\n# Your MinStack object will be instantiated and called as such:\n# obj = MinStack()\n# obj.push(val)\n# obj.pop()\n# param_3 = obj.top()\n# param_4 = obj.getMin()","compare_result":"1111111111111111111111111111111","title_slug":"min-stack"}