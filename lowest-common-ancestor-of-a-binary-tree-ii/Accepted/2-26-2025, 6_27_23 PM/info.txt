{"id":1556664577,"question_id":1780,"lang":"python3","lang_name":"Python3","time":"1 week, 4 days","timestamp":1740623243,"status":10,"status_display":"Accepted","runtime":"154 ms","url":"/submissions/detail/1556664577/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Tree II","memory":"22 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':\n\n        def lca(root):     \n            if not root:\n                return None\n\n            if root.val==p.val or root.val==q.val:\n                return root\n\n            left=lca(root.left)\n            right=lca(root.right)\n\n            if left and right:\n                return root\n\n            return left if left else right\n\n        def doesExist(root,target):\n            if not root:\n                return False\n            if root==target:\n                return True\n            return doesExist(root.left, target) or doesExist(root.right, target)\n            \n        if doesExist(root, p) and doesExist(root, q):\n            return lca(root)\n        return None\n\n        ","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"lowest-common-ancestor-of-a-binary-tree-ii","has_notes":false,"flag_type":1}