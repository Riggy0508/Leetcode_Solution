{"id":831781904,"lang":"python3","lang_name":"Python3","time":"3 months, 4 weeks","timestamp":1666924994,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/831781904/","is_pending":"Not Pending","title":"Linked List Cycle II","memory":"N/A","code":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def detectCycle(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        \n        slow=head\n        fast=head\n        \n        while fast and fast.next:\n            slow=slow.next\n            fast=fast.next.next\n            \n            if fast==slow: break\n            \n        slow2=head\n        while slow.next:\n            if slow2==slow: return slow\n            slow=slow.next\n            slow2=slow2.next\n        \n        return \n            \n            ","compare_result":"11100000000000000","title_slug":"linked-list-cycle-ii","has_notes":false}