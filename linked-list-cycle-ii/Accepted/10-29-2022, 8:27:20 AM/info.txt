{"id":832740259,"lang":"python3","lang_name":"Python3","time":"1 week, 3 days","timestamp":1667057240,"status":10,"status_display":"Accepted","runtime":"129 ms","url":"/submissions/detail/832740259/","is_pending":"Not Pending","title":"Linked List Cycle II","memory":"17.3 MB","code":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def detectCycle(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        if not head:\n            return\n        \n        slow=head\n        fast=head\n        \n        while fast and fast.next:\n            fast=fast.next.next\n            slow=slow.next\n            if fast==slow:\n                break\n\n        #print(slow)\n        \n        slow2=head\n        \n        while slow.next:\n            if slow2==slow:\n                return slow2\n            slow=slow.next\n            slow2=slow2.next\n            \n        return","compare_result":"11111111111111111","title_slug":"linked-list-cycle-ii","has_notes":false,"notes":"","topic_tags":[]}