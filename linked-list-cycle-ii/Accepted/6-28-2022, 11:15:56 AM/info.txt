{"id":733651852,"lang":"python3","time":"2 months, 4 weeks","timestamp":1656440156,"status_display":"Accepted","runtime":"102 ms","url":"/submissions/detail/733651852/","is_pending":"Not Pending","title":"Linked List Cycle II","memory":"17.4 MB","code":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def detectCycle(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        if not head:\n            return \n        slow,fast=head,head\n        \n        while fast.next and fast.next.next:\n            slow=slow.next\n            fast=fast.next.next\n            \n            if fast==slow: break\n        if not fast.next or not fast.next.next: return\n        \n        slow2=head\n        \n        while slow.next:\n            if slow2==slow: return slow\n            slow=slow.next\n            slow2=slow2.next\n            \n        return ","compare_result":"1111111111111111","title_slug":"linked-list-cycle-ii"}