{"id":810178455,"lang":"python3","lang_name":"Python3","time":"4 months, 4 weeks","timestamp":1664322877,"status":10,"status_display":"Accepted","runtime":"110 ms","url":"/submissions/detail/810178455/","is_pending":"Not Pending","title":"Linked List Cycle II","memory":"17.3 MB","code":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def detectCycle(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        if head is None:\n            return\n        \n        slow,fast=head,head\n        while fast and fast.next:\n            slow=slow.next\n            fast=fast.next.next\n            if fast==slow:\n                break\n                \n        else:\n            return None\n        \n        \n        s2=head\n        while slow!=s2:\n            slow=slow.next\n            s2=s2.next\n        return s2\n            ","compare_result":"11111111111111111","title_slug":"linked-list-cycle-ii","has_notes":false}